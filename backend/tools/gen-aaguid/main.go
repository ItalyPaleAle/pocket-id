package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: gen-aaguid <input-json-file> <output-go-file>")
		os.Exit(1)
	}

	inputFile := os.Args[1]
	outputFile := os.Args[2]

	// Read the input JSON file
	data, err := os.ReadFile(inputFile)
	if err != nil {
		fmt.Printf("Error reading JSON file: %v\n", err)
		os.Exit(1)
	}

	// Parse the JSON data
	var aaguidMap map[string]string
	err = json.Unmarshal(data, &aaguidMap)
	if err != nil {
		fmt.Printf("Error parsing JSON: %v\n", err)
		os.Exit(1)
	}

	// Create output directory if it doesn't exist
	err = os.MkdirAll(filepath.Dir(outputFile), 0755)
	if err != nil {
		fmt.Printf("Error creating directory: %v\n", err)
		os.Exit(1)
	}

	// Create the output file
	f, err := os.Create(outputFile)
	if err != nil {
		fmt.Printf("Error creating output file: %v\n", err)
		os.Exit(1)
	}
	defer f.Close()

	// Write the Go code
	fmt.Fprintf(f, "// Code generated by gen-aaguid; DO NOT EDIT.\n")
	fmt.Fprintf(f, "// Source: %s\n", filepath.Base(inputFile))
	fmt.Fprintf(f, "// Generated: %s\n\n", time.Now().Format(time.RFC3339))
	fmt.Fprintf(f, "package utils\n\n")
	fmt.Fprintf(f, "// AAGUIDMap is a map of AAGUID to authenticator name\n")
	fmt.Fprintf(f, "var AAGUIDMap = map[string]string{\n")

	// Write map entries, properly formatted with quotes
	for aaguid, name := range aaguidMap {
		// Escape quotes in the name if needed
		escapedName := strings.ReplaceAll(name, `"`, `\"`)
		fmt.Fprintf(f, "\t\"%s\": \"%s\",\n", aaguid, escapedName)
	}

	fmt.Fprintf(f, "}\n")

	fmt.Printf("Successfully generated %s with %d AAGUID entries\n", outputFile, len(aaguidMap))
}
